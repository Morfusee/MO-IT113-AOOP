{
    "/MO-IT110-OOP/": {
        "title": "Introduction",
        "text": "Motorph Application User and Technical Documentation This system is designed to streamline and automate payroll processes, including employee management, attendance tracking, leave requests, and payroll generation.  This documentation is intended for: \n   \n   \n HR Personnel \n   \n Employees \n   \n System Administrator \n   \n Get Started"
    },
    "/MO-IT110-OOP/documentation/getting-started/": {
        "title": "Getting Started",
        "text": "Getting Started 1 Prerequisites Before accessing the application, ensure you have the following installed: Node.js npm  or  pnpm Java Coding Pack for VSCode Visual Studio Code Optional If you can run Java in another IDE while using VSCode for the frontend, you may skip this, but VSCode is preferred for consistency. 2 Cloning the Repository Once you have installed the prerequisites, clone this repository to your machine: Shell git  clone  https://github.com/Morfusee/MO-IT110-OOP.git For more details on cloning a repository, check  GitHub's documentation . 3 Running the Application Frontend Open the project folder in  Visual Studio Code. Open the terminal. To open it you can either: Press  Ctrl + J   to open the terminal. Navigate over to  Terminal  and select  New Terminal . Using the terminal, navigate to the  frontend  directory: Shell cd  frontend Install the packages for the frontend: npm Shell npm  install pnpm Shell pnpm  install After installing the packages, start the frontend server: npm Shell npm  run  dev pnpm Shell pnpm  run  dev The frontend server will start and provide a URL where you can access the application. Backend Optional If you prefer another Java-supported IDE, you can run the backend from there and then access the frontend normally. Open  VSCode . This will then initialize the Java SDK: Wait until the Java SDK is fully loaded. Click on any Java file, and a  Run  button should appear beside your open files. Click the  Run  button, and a dropdown will appear. Select  MotorphApplication.java . Once started, the console will display logs indicating that  MotorphApplication  has started successfully."
    },
    "/MO-IT110-OOP/documentation/using-the-payroll-system/": {
        "title": "Using the Payroll System",
        "text": "Using the Payroll System Logging In Head over to  http://localhost:5173/ . Enter your username and password on the login page. Click the  Login  button. Upon successful login, you will be redirected to the  Attendance  or  Employee  page. Note Initially, the HR Manager's credentials will be provided automatically. You can also  log in as an employee . Attendance Management 1 View Attendance On the  Attendance  page, both HR Managers and Employees can view attendance records and access attendance analytics. HR Manager Viewing own attendance Navigate to the  Attendance  page. Select the  month and year  from the dropdown. If attendance data exists for the selected period, it will be displayed in a table. Viewing another employee’s attendance Navigate to the  Attendance  page. Use the  employee selection combobox  beside the  month and year  dropdown to choose an employee. Select the  month and year  from the dropdown. The selected employee’s attendance data will be displayed in a table. Employees Viewing Own Attendance Navigate to the  Attendance  page. Select the  month and year  from the dropdown. If attendance data exists for the selected period, it will be displayed in a table. Employee Management Important:  This feature set is  only accessible  by the  HR Manager . 1 View Employee List To view the employees of MotorPH, the HR Manager can simply head over to the  Employee  page. 2 Search Employees The HR Manager can also search for an employee using the search bar at the top of the page. Note If there are no employees found, the table will just return an error message. 3 Create Employees To create an employee on this page, the HR Manager must: Click the  Create  button placed on the top right of the table. Fill out all the necessary fields. Finally, click the  Create Employee  button. If successful, the created employee should appear at the bottom of the list. Note Passwords are auto-generated in the backend. Learn more  here . 4 Delete Employees Click the  three-dot icon  at the end of the row for the employee you want to delete. In the dropdown menu, click  Delete . Confirm the action by clicking  Delete  in the modal prompt. 5 Edit Employees To edit an employee on this page, the HR Manager must: Similar to deleting an employee, click the  three-dot icon  at the end of the row for the employee you want to edit. In the dropdown menu, click  Edit . In the  Edit Employee  modal, update the necessary details. Click the  Edit Employee  button once done. Warning Leaving fields empty will prevent the employee from being edited. Payroll Management 1 Calculate Monthly Salary Employees, including the HR Manager, can calculate for their monthly net salary. HR Manager Calculating own salary Select the desired  year  from the dropdown. Tip If the selected year has no payroll months to display, try using  2022 . Select the desired  payroll month  from the list. The payroll breakdown for the selected month will be displayed in the  right corner  of the screen. Calculating other employee's salary Select the desired  year  from the dropdown. Use the  employee selection combobox  beside the  month and year  dropdown to choose an employee. Select the desired  payroll month  from the list.  The payroll breakdown for the selected month will be displayed in the  right corner  of the screen. Employees Calculating own salary Select the desired  year  from the dropdown. No Payroll Months If the selected year has no payroll months to display, try using  2022 . Select the desired  payroll month  from the list. The payroll breakdown for the selected month will be displayed in the  right corner  of the screen. Leave Request Management 1 Create Leave Request Both Employees and HR Managers can create leave requests by following these steps: Click the  Create  button on the  Leave Request  page. In the modal form, fill in the  leave type, start date, and end date  fields. 3. Click  Confirm  to submit the request. Once submitted, the leave request will appear under the  Pending  status filter. 2 Delete Leave Request HR Manager Deleting own leave request Select the leave request(s) you want to delete. Click the  Delete  button. In the confirmation modal, click  Delete  to confirm. Deleting other employee's leave request This process is identical to  deleting your own leave request. Employees Deleting own leave request Select the leave request(s) you want to delete. Click the  Delete  button. In the confirmation modal, click  Delete  to confirm. Note Employees cannot delete other employees' requests. Only the HR Manager can do that. 3 Approve or Deny Leave Request Important:  This feature is only available to the HR Manager. To approve or deny leave requests, the HR Manager must do the following: Select the leave request(s) to approve or deny. Depending on the current status of the request, either the  Approve  or  Deny  button will be clickable. Click the appropriate button to update the status of the selected leave request(s). Profile Management 1 View Profile Both roles have access to this page. To access this feature, simply navigate to the  Profile  page."
    },
    "/MO-IT110-OOP/documentation/system-overview/system-ar/": {
        "title": "System Architecture",
        "text": "System Architecture The  Motorph Payroll System  follows a  client-server architecture , where the  frontend (React with TypeScript & Vite)  interacts with the  backend (Spring Boot & Java)  via  RESTful APIs . The backend manages authentication, business logic, and data processing, while the frontend provides an intuitive interface for employees and HR managers. Frontend Structure The frontend is built using  React  with  TypeScript,  Vite .  This enables a highly reactive user interface that efficiently updates based on state changes, allowing the frontend to fetch, display, and update data seamlessly  without requiring full-page reloads. Most of the app's frontend functionality is under  /frontend/src . With that said, all the folders and files listed below are under it. Folder Description App.tsx Main application component that defines routing. components/ Reusable UI components (e.g., menus, modals). constants/ Constants for API endpoints, form sections, etc. contexts/ React context for managing application state (e.g., theme). controllers/ Functions for interacting with backend services. css/ Global stylesheet. factories/ Custom component factories hooks/ Custom React hooks (e.g., useAuth, useIsDarkMode). layouts/ Layout components (e.g., Sidebar, Layout). pages/ React components for different pages (e.g., Attendance, Employees, Payroll). routes/ Route definitions for navigation. services/ API services for making HTTP requests to the backend. store/ State management using zustand. types/ TypeScript type definitions for components and data. utils/ Utility functions (e.g., date formatting, permission checking). Backend Structure The backend is built using  Java with Spring Boot , which provides a robust and scalable framework for developing RESTful APIs. Spring Boot simplifies dependency management, configuration, and security, enabling efficient request handling, database interactions, and business logic execution Most of the backend's functionality is under  /backend/src/main/java/com/oop/motorph . All the folders and files listed below are within this directory. Folder Description config/ Configuration classes (DatabaseConfig, SecurityConfig). controller/ REST controllers for handling API requests (e.g., EmployeeController, AttendanceController, HRPayrollController). dto/ Data Transfer Objects for request and response payloads (e.g., EmployeeDTO, PayrollDTO). mapper/ Mappers for converting between entities and DTOs. entity/ JPA entities representing database tables (e.g., Employee, Attendance, Payroll). repository/ Spring Data JPA repositories for database interactions (e.g., EmployeeRepository, AttendanceRepository). service/ Business logic services (e.g., EmployeeService, PayrollService). utils/ Utility classes and exception handling."
    },
    "/MO-IT110-OOP/documentation/system-overview/technical-diagrams/": {
        "title": "Technical Diagrams",
        "text": "Technical Diagrams Use Case Diagram The diagram below represents the interactions between system actors and the  system's features .  To have an in-depth view of this diagram, head over  here . System Actors Actor Description HR Manager Manages employees, attendance, payroll, leave approvals Employee Views attendance, requests leave, checks payroll Authentication Service This is just basically a part of the backend that is acting on the log in action of the Employee and HR Manager. Class Diagram The class diagram shown below depicts the relationships between entities in the backend. It also provided developers with a high-level overview of the  backend's structure . To have a better look of the diagram, check out the  documentation  for it. Key Classes Key Classes Description Employee Stores employee details. Attendance Stores check-in/out records. Payroll Contains salary and deduction details. LeaveRequest Tracks employee leave requests User Manages authentication credentials Database Schema The database is designed and implemented in  H2  with the following tables: 1 Users Column Name Data Type Description id INT Unique identifier for the user account. username VARCHAR(100) Username for logging into the system. password CHAR(60) Hashed password for the user account. 2 GovernmentIdentification Column Name Data Type Description id INT Unique identifier for the government identification record. Philhealth BIGINT PhilHealth ID of the employee. TIN VARCHAR(20) \t Tax Identification Number of the employee. Pagibig BIGINT Pag-IBIG (Home Development Mutual Fund) ID of the employee. SSS VARCHAR(20) Social Security System ID of the employee. 3 Compensation Column Name Data Type Description id INT Unique identifier for the compensation record. basic_salary DECIMAL(10,2) \t Basic salary of the employee. rice_subsidy DECIMAL(10,2) Rice subsidy amount for the employee. phone_ allowance DECIMAL(10,2) Phone allowance amount for the employee. clothing_ allowance DECIMAL(10,2) Clothing allowance amount for the employee. gross_semi_ monthly_rate DECIMAL(10,2) Gross semi-monthly rate of the employee. hourly_rate DECIMAL(10,2) Hourly rate of the employee. 4 Employee Column Name Data Type Description employeeNum INT Unique identifier for the employee (auto-incremented starting from 10001). last_name VARCHAR(100) Last name of the employee. first_name VARCHAR(100) First name of the employee. birthday DATE Birth date of the employee. address TEXT Address of the employee. phone_ number VARCHAR(15) Phone number of the employee. status VARCHAR(50) Employment status of the employee (e.g., Regular, Probationary). position VARCHAR(100) Job title of the employee. immediate_ supervisor VARCHAR(255) Name of the employee's immediate supervisor. government IdentificationId INT Foreign key referencing GovernmentIdentification table (ON DELETE CASCADE). compensationId INT Foreign key referencing Compensation table (ON DELETE CASCADE). userId INT Foreign key referencing Users table (ON DELETE CASCADE). 5 Attendance Column Name Data Type Description id INT Unique identifier for the attendance record. employeeNum INT Employee number associated with the attendance record. date DATE \t Date of the attendance record. time_in TIME Time the employee clocked in. time_out TIME Time the employee clocked out. 6 Leave Request Column Name Data Type Description id INT Unique identifier for the leave request. employeeNum INT Employee number associated with the attendance record. startDate TIMESTAMP Start date of the leave. endDate TIMESTAMP End date of the leave. notes TEXT Any notes or description for the leave request. leave_type VARCHAR(50) Type of leave requested (e.g., Sick Leave, Vacation Leave). status VARCHAR(50) Status of the leave request (e.g., Pending, Approved, Denied)."
    },
    "/MO-IT110-OOP/documentation/system-overview/testing-and-quality-a/": {
        "title": "Testing and Quality Assurance",
        "text": "Testing and Quality Assurance Testing Overview The system is tested using  JUnit ,  Spring Test,  and Internal and External  User Acceptance Testing  to validate backend functionality, while frontend testing focuses on component behavior and API integration. For more information, click  here . JUnit and Sprint Test For backend testing, our coverage is approximately  85% . We conducted tests for  create, read, update, and delete  operations across most controllers and objects, ensuring a reliable and well-tested client-server interaction. Below are the test results: All of the tests are run. Detailed view of the test cases. User Acceptance Testing We conducted two types of user acceptance tests:  Internal and External Testing. Internal Testing As the name implies, internal testing was carried out within our team to ensure that all intended functionalities were correctly implemented in the application. Below are the test results: Test Case Actual Result Result Launch application User sees the login page Pass Log in with valid credentials User is redirected to the appropriate dashboard (Employee or HR Manager). Pass Log in with invalid credentials User sees an error message stating incorrect credentials. Pass Log in as an HR Manager HR Manager sees additional UI elements exclusive to admins Pass Log in as an Employee Employee dashboard is displayed with limited access. Pass Access Employee Page as an HR Manager HR Manager can see the employee list, search bar, and Create button Pass Access Employee Page as an Employee Employee is blocked from accessing the page. Pass Search for an employee Only matching employees appear in the list. Pass Create a new employee Employee is added to the list. Pass Create an employee with an existing username Error message \"Username already exists\" is displayed. Pass Edit an employee’s details Updated employee details appear correctly in the list. Pass Delete an employee Employee is successfully deleted and no longer appears in the list. Pass View attendance as an Employee Employee’s personal attendance data is displayed correctly. Pass View attendance as HR Manager HR Manager can search and view attendance records of employees. Pass Select an attendance month Attendance records update correctly based on the selected month. Pass Attendance analytics matches data Total presents, lates, absences, and rendered hours are correctly computed. Pass View payroll as an Employee Employee payroll history is displayed correctly. Pass View payroll as HR Manager HR Manager successfully searches and views payroll records. Pass Select a payroll year Payroll records update when a different year is selected. Pass Payroll computation validation Payroll amounts are correctly computed based on formulas. Pass Filter leave requests by status List updates to show only requests with the selected status. Pass Filter leave requests by visibility Toggle between \"Created by me\" and \"All\" updates the list correctly. Pass Submit a leave request New leave request appears in pending requests. Pass Submit leave request with invalid dates \"Invalid date selection\" error message is displayed. Pass Delete own leave request Leave request is successfully deleted. Pass Approve/Deny leave request (HR Manager) Leave request status updates correctly after approval/denial. Pass View Profile Page Profile details are loaded correctly with accurate information. Pass External Testing External testing was conducted with users outside our development team to evaluate the system’s functionality, usability, and overall user experience. Feedback from this testing helped identify potential improvements and ensure the application met user expectations. Below are the results: Test Case Actual Result Result Launch application User sees the login page Pass Log in with valid credentials User is redirected to the appropriate dashboard (Employee or HR Manager). Pass Log in with invalid credentials User sees an error message stating incorrect credentials. Pass Log in as an HR Manager HR Manager sees additional UI elements exclusive to admins Pass Log in as an Employee Employee dashboard is displayed with limited access. Pass Access Employee Page as an HR Manager HR Manager can see the employee list, search bar, and Create button Pass Access Employee Page as an Employee Employee is blocked from accessing the page. Pass Search for an employee Only matching employees appear in the list. Pass Create a new employee Employee is added to the list. Pass Create an employee with an existing username Error message \"Username already exists\" is displayed. Pass Edit an employee’s details Updated employee details appear correctly in the list. Pass Delete an employee Employee is successfully deleted and no longer appears in the list. Pass View attendance as an Employee Employee’s personal attendance data is displayed correctly. Pass View attendance as HR Manager HR Manager can search and view attendance records of employees. Pass Select an attendance month Attendance records update correctly based on the selected month. Pass Attendance analytics matches data Total presents, lates, absences, and rendered hours are correctly computed. Pass View payroll as an Employee Employee payroll history is displayed correctly. Pass View payroll as HR Manager HR Manager successfully searches and views payroll records. Pass Select a payroll year Payroll records update when a different year is selected. Pass Payroll computation validation Payroll amounts are correctly computed based on formulas. Pass Filter leave requests by status List updates to show only requests with the selected status. Pass Filter leave requests by visibility Toggle between \"Created by me\" and \"All\" updates the list correctly. Pass Submit a leave request New leave request appears in pending requests. Pass Submit leave request with invalid dates \"Invalid date selection\" error message is displayed. Pass Delete own leave request Leave request is successfully deleted. Pass Approve/Deny leave request (HR Manager) Leave request status updates correctly after approval/denial. Pass View Profile Page Profile details are loaded correctly with accurate information. Pass For a detailed overview of both tests, click  here ."
    },
    "/MO-IT110-OOP/documentation/faqs/": {
        "title": "FAQs",
        "text": "FAQs How do I log in as an employee? To obtain the credentials of other employees, you can do the following: Navigate to the repository's backend folder. Open the  src/main/resources  directory and locate  LoginCredentials.json . Select an employee from the list and use the provided credentials to log in. What are the d efault credentials for new employees By design, the system does not prompt for a password when assigning an employee, as credentials are meant to be sent directly to the employee's email (this feature is not yet implemented). Currently, new employees are assigned  password  as their default password."
    },
    "/MO-IT110-OOP/documentation/about/": {
        "title": "About Us",
        "text": "About Us Purpose This documentation is intended to provide users and future developers with a comprehensive understanding of the system’s architecture and features. Additionally, it serves as a  submission  for the  A2101 MO-IT110 - Object-Oriented Programming  Terminal Assessment. Info This is all for educational purposes. Please use this documentation solely for learning and reference, and refrain from distributing or using it for commercial purposes. Members \n   \n   \n Mark Rolis Valenzuela \n   \n   \n Maricon Caluya \n   \n   \n Clark Anton Juan Diaz Group Number and Section We are  Group 13  of section  A2101 ."
    }
}