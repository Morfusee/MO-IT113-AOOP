package com.oop.motorph.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Abstract base class for all user types in the system.
 * 
 * This entity is mapped to the "USERS" table and uses a JOINED inheritance
 * strategy,
 * allowing subclasses to extend this base user model with their own attributes.
 * 
 * Lombok annotations are used for boilerplate code like constructors and
 * getters/setters.
 * Jackson annotations handle JSON serialization behavior.
 */
@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "USERS")
@JsonIgnoreProperties(ignoreUnknown = true)
@Inheritance(strategy = InheritanceType.JOINED)
public abstract class User {

    /**
     * Primary key for the user entity.
     * Auto-generated by the database.
     */
    @Id
    @Column(name = "id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    /**
     * Unique and non-null username for the user.
     */
    @Column(unique = true, nullable = false)
    private String username;

    /**
     * User's password.
     * 
     * This field is write-only in JSON to ensure that it is not exposed
     * in API responses.
     */
    @Column(nullable = false)
    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    private String password;
}
